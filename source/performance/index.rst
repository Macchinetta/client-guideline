.. _javascript-perfomance:

JavaScriptの性能チューニング
================================

| クライアントサイドの開発では、以前からJavaScriptの性能が問題となることが多かった。
| 近年はブラウザのJavaScriptエンジンの高速化によって改善されてきているが、処理コストが大きかったり、無駄があるコードが原因となり、体感できるほどの性能問題を引き起こす事もある。
| JavaScriptの性能問題は、ユーザビリティの低下を招くことにも繋がることがあるため、コードを見直し、処理性能の改善に取り組むべきである。
| 一つ一つの改善効果は小さいかもしれないが、積み重ねることが重要である。

| ここでは、JavaScriptの性能チューニングの参考となるコーディングについて、説明する。

| ガイドラインで紹介しているUIコンポーネントを組み合わせて複雑な画面を作成する際に性能問題が起きた場合は、ここに記載されている事項を確認し、より効率的な処理への変更や実現したい要件に適した実装へ見直すことで問題が解決するかもしれない。
| また、設計やコーディングを行う前に事前に注意点を確認した上で作業することで、性能問題の発生を未然に防ぐことに努めてほしい。

.. note::
    性能問題が発生した場合、ChromeのデベロッパーツールのTimelineやProfile、Firefoxの開発ツールのパフォーマンス、IEの開発者ツールのプロファイラーなどを利用すると、どのメソッドで時間がかかったのか調査しやすい。

    またChromeのデベロッパーツールの場合、コード内に以下のメソッドを記述することで、その区間のプロファイルを取得する事ができる。

    \ ``profile``\メソッドにtitleを設定することで、同じtitleの\ ``profileEnd``\メソッドまでの間のみを解析してくれるため、複数の区間に分けて取得する事もできる。

      .. code-block:: javascript

           console.profile('title');
           console.profileEnd('title');

    性能改善は、下記の大まかなフローで実施する。

    * ツールを用いて処理時間の調査を行うことで、どのメソッドにどれだけ時間がかかったのかを明らかにする。
    * 処理時間のかかっているメソッドを確認し、改善すべき処理の絞り込みを行う。
    * 改善すべき処理に対して、対策を実施する。


.. JavaScriptの処理と性能
.. include:: performance/include/javascript-basic.rst

.. jQuery利用時のチューニング
.. include:: performance/include/jquery-selector.rst
